// generated by Fast Light User Interface Designer (fluid) version 1.0401

#include "ui.h"

Fl_Menu_Item user_interface::menu_choice_input_protocol[] = {
 {"SDP / RDP", 0,  0, (void*)(1), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"NDI", 0,  0, (void*)(2), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* user_interface::select_sdp_input = user_interface::menu_choice_input_protocol + 0;
Fl_Menu_Item* user_interface::select_ndi_input = user_interface::menu_choice_input_protocol + 1;

user_interface::user_interface() {
  { main_window = new Fl_Double_Window(950, 475, "Open Broadcast Encoder");
    main_window->user_data((void*)(this));
    { pack = new Fl_Flex(50, 25, 900, 430);
      pack->type(1);
      { Fl_Flex* o = new Fl_Flex(100, 50, 260, 380, "Input");
        { choice_input_protocol = new Fl_Choice(100, 50, 260, 25, "Protocol");
          choice_input_protocol->down_box(FL_BORDER_BOX);
          choice_input_protocol->when(FL_WHEN_RELEASE_ALWAYS);
          choice_input_protocol->menu(menu_choice_input_protocol);
        } // Fl_Choice* choice_input_protocol
        { sdp_options_group = new Fl_Flex(100, 100, 260, 148, "SDP / RDP Options");
          sdp_options_group->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          sdp_options_group->hide();
          sdp_options_group->end();
        } // Fl_Flex* sdp_options_group
        { ndi_options_group = new Fl_Flex(100, 273, 260, 157, "NDI Options");
          ndi_options_group->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          ndi_options_group->end();
        } // Fl_Flex* ndi_options_group
        o->gap(25);
        o->fixed(o->child(0), 25);
        o->fixed(o->child(1), 148);
        o->end();
      } // Fl_Flex* o
      { Fl_Flex* o = new Fl_Flex(370, 50, 260, 380, "Encode");
        o->end();
      } // Fl_Flex* o
      { Fl_Flex* o = new Fl_Flex(640, 50, 260, 380, "Output");
        o->end();
      } // Fl_Flex* o
      pack->margin(50, 25, 50, 25);
      pack->gap(10);
      pack->end();
    } // Fl_Flex* pack
    main_window->resizable(pack);
    main_window->end();
  } // Fl_Double_Window* main_window
}

void user_interface::show(int argc, char **argv) const {
  main_window->show(argc, argv);
}
